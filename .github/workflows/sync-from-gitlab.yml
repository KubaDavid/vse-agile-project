name: Sync From GitLab

on:
  workflow_dispatch:
    inputs:
      gitlab_branch:
        description: GitLab branch name to sync from
        required: true
        default: main
      github_branch:
        description: GitHub base branch to target
        required: true
        default: main

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      GITLAB_BRANCH: ${{ inputs.gitlab_branch }}
      GITHUB_BRANCH: ${{ inputs.github_branch }}
      SYNC_BRANCH: sync/${{ inputs.gitlab_branch }}
    steps:
      - name: Check out GitHub base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
          fetch-depth: 0

      - name: Add GitLab remote
        run: git remote add gitlab https://gitlab.com/4it5801-public/quacker.git

      - name: Fetch specified GitLab branch
        run: git fetch gitlab "$GITLAB_BRANCH"

      - name: Reset local branch to GitLab state
        run: git reset --hard "gitlab/$GITLAB_BRANCH"

      - name: Switch to sync branch
        run: git checkout -B "$SYNC_BRANCH"

      - name: Push sync branch to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push origin HEAD:"$SYNC_BRANCH" --force-with-lease

      - name: Open or update pull request
        uses: actions/github-script@v7
        env:
          SYNC_BRANCH: ${{ env.SYNC_BRANCH }}
          GITHUB_BRANCH: ${{ env.GITHUB_BRANCH }}
          GITLAB_BRANCH: ${{ env.GITLAB_BRANCH }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const head = `${owner}:${process.env.SYNC_BRANCH}`;
            const base = process.env.GITHUB_BRANCH;
            const title = `Sync ${process.env.GITLAB_BRANCH} from GitLab`;
            const body = [
              `Automated sync pulling \`${process.env.GITLAB_BRANCH}\` from GitLab.`,
              `Updates \`${base}\` on GitHub.`
            ].join('\n\n');

            const existing = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              head
            });

            const match = existing.data.find(pr => pr.head && pr.head.ref === process.env.SYNC_BRANCH && pr.base && pr.base.ref === base);

            if (match) {
              core.info(`Pull request already open: #${match.number}`);
              return;
            }

            const pr = await github.rest.pulls.create({
              owner,
              repo,
              head,
              base,
              title,
              body,
              maintainer_can_modify: true
            });

            core.info(`Opened PR #${pr.data.number}`);
